<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>一次脑瘫事件 - 广搜八数码问题</title>
    <link href="/2023/07/12/bfs-eight/"/>
    <url>/2023/07/12/bfs-eight/</url>
    
    <content type="html"><![CDATA[<h1 id="一次脑瘫事件---关于广搜八数码问题一个隐秘的-bug">一次脑瘫事件 -关于广搜八数码问题一个隐秘的 Bug</h1><div class="note note-info">            <p>注：本篇首发于作者<ahref="https://www.luogu.com.cn/blog/fireale/ba-shu-ma">洛谷博客</a>，作同步处理<br>（主要是一开始没东西发，先转个发过的（</p>          </div><h3id="好吧我真不知道我能遇到这样的bug">好吧我真不知道我能遇到这样的bug</h3><p><span class="math inline">\(ps\)</span>：这篇不介绍广搜思路，仅吐槽单个bug.</p><hr /><h3 id="首先贴一下原题">1. 首先贴一下原题</h3><h3 id="八数码难题luogup1379"><ahref="https://www.luogu.com.cn/problem/P1379">八数码难题（LuoguP1379）</a></h3><h4 id="题目描述">题目描述</h4><p>在 <span class="math inline">\(3\times 3\)</span>的棋盘上，摆有八个棋子，每个棋子上标有 <spanclass="math inline">\(1\)</span> 至 <spanclass="math inline">\(8\)</span> 的某一数字。棋盘中留有一个空格，空格用<span class="math inline">\(0\)</span>来表示。空格周围的棋子可以移到空格中。要求解的问题是：给出一种初始布局（初始状态）和目标布局（为了使题目简单,设目标状态为<spanclass="math inline">\(123804765\)</span>），找到一种最少步骤的移动方法，实现从初始布局到目标布局的转变。</p><h4 id="输入格式">输入格式</h4><p>输入初始状态，一行九个数字，空格用 <spanclass="math inline">\(0\)</span> 表示。</p><h4 id="输出格式">输出格式</h4><p>只有一行，该行只有一个数字，表示从初始状态到目标状态需要的最少移动次数。保证测试数据中无特殊无法到达目标状态数据。</p><h4 id="样例-1">样例 #1</h4><h5 id="样例输入-1">样例输入 #1</h5><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">283104765</span><br></code></pre></td></tr></table></figure><h5 id="样例输出-1">样例输出 #1</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">4<br></code></pre></td></tr></table></figure><h4 id="提示">提示</h4><h5 id="样例解释">样例解释</h5><p><imgsrc="https://cdn.luogu.com.cn/upload/image_hosting/7rhxbnup.png" /></p><p>图中标有 <span class="math inline">\(0\)</span>的是空格。绿色格子是空格所在位置，橙色格子是下一步可以移动到空格的位置。如图所示，用四步可以达到目标状态。</p><p>并且可以证明，不存在更优的策略。</p><hr /><h3 id="分析">2. 分析</h3><p><del>一眼丁真，</del> 最少移动步数，鉴定为广搜</p><p>至于判重，声明一个9维数组vis，利用桶的思想我们执行 <spanclass="math inline">\(if(vis[s[0]][s[1]][s[2]]...[s[8]])\)</span>？虽然可以 <span class="math inline">\(O(1)\)</span> 时间判重，但是<span class="math inline">\(9\)</span> 维数组每一维都要包含 <spanclass="math inline">\(9\)</span> 个元素，总共 <spanclass="math inline">\(9^9=387420489\)</span>项，太多了，数组开不了这么大</p><p>注意到可以把 <span class="math inline">\(9\)</span>个数字从左到右、从上到下<strong><span class="label label-warning">排成排列数</span></strong>，鉴定为康托展开，再写个逆康托展开。这样就只有 <span class="math inline">\(9!=362880\)</span>项，数组存得了了。至于康托展开和逆康托展开是什么，可以看看<ahref="https://baike.baidu.com/item/%E5%BA%B7%E6%89%98%E5%B1%95%E5%BC%80">百度百科词条</a></p><p>貌似排成一排之后还有一个<strong>特色</strong>：根据字符串存储状态，设空格当前位置为<span class="math inline">\(P\)</span> ，则有：</p><ol type="1"><li>空格向上移动：空格位置减 <span class="math inline">\(3\)</span>，即交换 <span class="math inline">\(P\)</span> 和 <spanclass="math inline">\(P-3\)</span> 的字符</li><li>空格向左移动：空格位置减 <span class="math inline">\(1\)</span>，即交换 <span class="math inline">\(P\)</span> 和 <spanclass="math inline">\(P-1\)</span> 的字符</li><li>空格向右移动：空格位置加 <span class="math inline">\(1\)</span>，即交换 <span class="math inline">\(P\)</span> 和 <spanclass="math inline">\(P+1\)</span> 的字符</li><li>空格向下移动：空格位置加 <span class="math inline">\(3\)</span>，即交换 <span class="math inline">\(P\)</span> 和 <spanclass="math inline">\(P+3\)</span> 的字符</li></ol><p>如果设规则编号为 <span class="math inline">\(k\)</span>，则上述四条规则可归纳为一条：<strong><span class="label label-warning"> 交换 $P$ 和 $P+(2*k-5)$ 的字符</span></strong>，照这样就好写状态转移了。</p><p>直接开写！——</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-comment">//#include&lt;cctype&gt;</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INF 0x3f3f3f3f</span><br> <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br> <br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn=<span class="hljs-number">362881</span>,dx[]=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;,dy[]=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>&#125;,<br>      fac[]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">24</span>,<span class="hljs-number">120</span>,<span class="hljs-number">720</span>,<span class="hljs-number">5040</span>,<span class="hljs-number">40320</span>,<span class="hljs-number">362880</span>&#125;;<br> <br><span class="hljs-comment">//struct ikun&#123;</span><br><span class="hljs-comment">//    int x,y,step;</span><br><span class="hljs-comment">//&#125;q[maxn];</span><br> <br><span class="hljs-type">int</span> n,fi,que[maxn],ti,step[maxn];<br><span class="hljs-type">bool</span> memo[maxn+<span class="hljs-number">10</span>];<br>string ts,tts;<br> <br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">Max</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span>&#123;<span class="hljs-keyword">return</span> a&gt;b?a:b;&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">turn</span><span class="hljs-params">(string a)</span></span>;<br><span class="hljs-function">string <span class="hljs-title">inturn</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>fi=<span class="hljs-built_in">turn</span>(<span class="hljs-string">&quot;123804765&quot;</span>);<br>    cin&gt;&gt;ts;<br>    <span class="hljs-type">int</span> head=<span class="hljs-number">0</span>,tail=<span class="hljs-number">1</span>,z;<br>    que[<span class="hljs-number">1</span>]=<span class="hljs-built_in">turn</span>(ts),step[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br><span class="hljs-comment">//    printf(&quot;%d\n&quot;,que[1]);</span><br><span class="hljs-comment">//    string ttt=inturn(que[1]);</span><br><span class="hljs-comment">//    cout&lt;&lt;ttt;</span><br><span class="hljs-keyword">if</span>(que[<span class="hljs-number">1</span>]==fi)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>    <span class="hljs-keyword">while</span>(tail&gt;head)&#123;<br>    head++,ts=<span class="hljs-built_in">inturn</span>(que[head]);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">4</span>;i++)&#123;<br>    tts=ts;<br>    <span class="hljs-keyword">for</span>(z=<span class="hljs-number">0</span>;z&lt;<span class="hljs-number">9</span>;z++)<br>    <span class="hljs-keyword">if</span>(tts[z]==<span class="hljs-string">&#x27;0&#x27;</span>)<br>    <span class="hljs-keyword">break</span>;<br>    <span class="hljs-type">int</span> aim=z+<span class="hljs-number">2</span>*i<span class="hljs-number">-5</span>;<br><span class="hljs-keyword">if</span>(!(aim&gt;=<span class="hljs-number">0</span>&amp;&amp;aim&lt;<span class="hljs-number">9</span>))<br><span class="hljs-keyword">continue</span>;<br>    <span class="hljs-built_in">swap</span>(tts[z],tts[aim]);<br>ti=<span class="hljs-built_in">turn</span>(tts);<br><span class="hljs-keyword">if</span>(!memo[ti])&#123;<br>tail++,memo[ti]=<span class="hljs-literal">true</span>,que[tail]=ti,step[tail]=step[head]+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(ti==fi)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,step[tail]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-1&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">turn</span><span class="hljs-params">(string a)</span></span>&#123;<br><span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>,cnt;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">9</span>;i++)&#123;<br>cnt=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i+<span class="hljs-number">1</span>;j&lt;<span class="hljs-number">9</span>;j++)<br><span class="hljs-keyword">if</span>(a[j]&lt;a[i])<br>cnt++;<br>sum+=cnt*fac[<span class="hljs-number">8</span>-i];<br>&#125;<br><span class="hljs-keyword">return</span> sum;<br>&#125;<br><br><span class="hljs-function">string <span class="hljs-title">inturn</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span>&#123;<br>string str;<br><span class="hljs-type">int</span> b,c,sum,num[<span class="hljs-number">9</span>];<br><span class="hljs-type">bool</span> pl[<span class="hljs-number">10</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">8</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>b=a/fac[i],c=a-fac[i]*b,sum=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;=<span class="hljs-number">8</span>;j++)&#123;<br><span class="hljs-keyword">if</span>(pl[j])<br><span class="hljs-keyword">continue</span>;<br>sum++;<br><span class="hljs-keyword">if</span>(sum==b+<span class="hljs-number">1</span>)<br>num[<span class="hljs-number">8</span>-i]=j,pl[j]=<span class="hljs-literal">true</span>;<br>&#125;<br>a=c;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">9</span>;i++)<br>str=str+(<span class="hljs-type">char</span>)(num[i]+<span class="hljs-string">&#x27;0&#x27;</span>);<br><span class="hljs-keyword">return</span> str;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>诶，感觉还行，测个样例——</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">in</span>:<span class="hljs-number">283104765</span><br><span class="hljs-attribute">out</span>:<span class="hljs-number">4</span><br><span class="hljs-attribute">correct</span>:<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>噫！好！我中了！！直接交罢——</p><h3 id="分"><ahref="https://www.luogu.com.cn/record/107949468"><strong><spanclass="math inline">\(25\)</span> 分。</strong></a></h3><p>啊？？？怎么会事呢？测错误点看看——</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">in</span>:<span class="hljs-number">603712458</span><br><span class="hljs-attribute">out</span>:<span class="hljs-number">17</span><br><span class="hljs-attribute">correct</span>:<span class="hljs-number">23</span><br></code></pre></td></tr></table></figure><p>嗯……改成用 <span class="math inline">\(set\)</span> 和 <spanclass="math inline">\(char\)</span>数组试试，可能是康托展开（或者逆康托展开）或者是 <spanclass="math inline">\(string\)</span> 的毛病吧</p><p>*小改</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-comment">//#include&lt;cctype&gt;</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INF 0x3f3f3f3f</span><br> <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br> <br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn=<span class="hljs-number">362881</span>,dx[]=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;,dy[]=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>&#125;,<br>  fac[]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">24</span>,<span class="hljs-number">120</span>,<span class="hljs-number">720</span>,<span class="hljs-number">5040</span>,<span class="hljs-number">40320</span>,<span class="hljs-number">362880</span>&#125;;<br> <br><span class="hljs-type">int</span> n,fi,que[maxn],ti,step[maxn];<br><span class="hljs-comment">//bool memo[maxn+10];</span><br><span class="hljs-comment">//string ts,tts;</span><br><span class="hljs-type">int</span> ts,tts;<br>set&lt;<span class="hljs-type">int</span>&gt; memo;<br> <br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">Max</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;a,<span class="hljs-type">int</span> &amp;b)</span></span>&#123;<span class="hljs-keyword">return</span> a&gt;b?a:b;&#125;;<br><span class="hljs-comment">//int turn(string a);</span><br><span class="hljs-comment">//string inturn(int a);</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">change</span><span class="hljs-params">(<span class="hljs-type">int</span> aim,<span class="hljs-type">int</span> &amp;p1,<span class="hljs-type">int</span> &amp;p2)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>memo.<span class="hljs-built_in">clear</span>();<br><span class="hljs-comment">//fi=turn(&quot;123804765&quot;);</span><br>fi=<span class="hljs-number">123804765</span>;<br><span class="hljs-comment">//    cin&gt;&gt;ts;</span><br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;que[<span class="hljs-number">1</span>]);<br>    <span class="hljs-type">int</span> head=<span class="hljs-number">0</span>,tail=<span class="hljs-number">1</span>,z;<br><span class="hljs-comment">//    que[1]=turn(ts),step[1]=0;</span><br>step[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br><span class="hljs-comment">//    printf(&quot;%d\n&quot;,que[1]);</span><br><span class="hljs-comment">//    string ttt=inturn(que[1]);</span><br><span class="hljs-comment">//    cout&lt;&lt;ttt;</span><br><span class="hljs-keyword">if</span>(que[<span class="hljs-number">1</span>]==fi)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>    <span class="hljs-keyword">while</span>(tail&gt;head)&#123;<br><span class="hljs-comment">//    head++,ts=inturn(que[head]);</span><br>head++,ts=que[head];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">4</span>;i++)&#123;<br>    tts=ts;<br><span class="hljs-comment">//    for(z=0;z&lt;9;z++)</span><br><span class="hljs-comment">//    if(tts[z]==&#x27;0&#x27;)</span><br><span class="hljs-comment">//    break;</span><br><span class="hljs-keyword">for</span>(z=<span class="hljs-number">9</span>;z&gt;=<span class="hljs-number">1</span>;z--)&#123;<br>    <span class="hljs-keyword">if</span>(tts%<span class="hljs-number">10</span>==<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">break</span>;<br>tts/=<span class="hljs-number">10</span>;<br>    &#125;<br>    tts=ts;<br>    <span class="hljs-type">int</span> aim=z+<span class="hljs-number">2</span>*i<span class="hljs-number">-5</span>;<br><span class="hljs-keyword">if</span>(!(aim&gt;=<span class="hljs-number">0</span>&amp;&amp;aim&lt;<span class="hljs-number">9</span>))<br><span class="hljs-keyword">continue</span>;<br><span class="hljs-comment">//    swap(tts[z],tts[aim]);</span><br><span class="hljs-comment">//ti=turn(tts);</span><br>ti=<span class="hljs-built_in">change</span>(tts,z,aim);<br><span class="hljs-keyword">if</span>(!memo.<span class="hljs-built_in">count</span>(ti))&#123;<span class="hljs-comment">//!memo[ti]</span><br><span class="hljs-comment">//tail++,memo[ti]=true,que[tail]=ti,step[tail]=step[head]+1;</span><br>tail++,memo.<span class="hljs-built_in">insert</span>(ti),que[tail]=ti,step[tail]=step[head]+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(ti==fi)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,step[tail]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-1&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//</span><br><span class="hljs-comment">//int turn(string a)&#123;</span><br><span class="hljs-comment">//int sum=0,cnt;</span><br><span class="hljs-comment">//for(int i=0;i&lt;9;i++)&#123;</span><br><span class="hljs-comment">//cnt=0;</span><br><span class="hljs-comment">//for(int j=i+1;j&lt;9;j++)</span><br><span class="hljs-comment">//if(a[j]&lt;a[i])</span><br><span class="hljs-comment">//cnt++;</span><br><span class="hljs-comment">//sum+=cnt*fac[8-i];</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">//return sum;</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//string inturn(int a)&#123;</span><br><span class="hljs-comment">//string str;</span><br><span class="hljs-comment">//int b,c,sum,num[9];</span><br><span class="hljs-comment">//bool pl[10]=&#123;0&#125;;</span><br><span class="hljs-comment">//for(int i=8;i&gt;=0;i--)&#123;</span><br><span class="hljs-comment">//b=a/fac[i],c=a-fac[i]*b,sum=0;</span><br><span class="hljs-comment">//for(int j=0;j&lt;=8;j++)&#123;</span><br><span class="hljs-comment">//if(pl[j])</span><br><span class="hljs-comment">//continue;</span><br><span class="hljs-comment">//sum++;</span><br><span class="hljs-comment">//if(sum==b+1)</span><br><span class="hljs-comment">//num[8-i]=j,pl[j]=true;</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">//a=c;</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">//for(int i=0;i&lt;9;i++)</span><br><span class="hljs-comment">//str=str+(char)(num[i]+&#x27;0&#x27;);</span><br><span class="hljs-comment">//return str;</span><br><span class="hljs-comment">//&#125;</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">change</span><span class="hljs-params">(<span class="hljs-type">int</span> n,<span class="hljs-type">int</span> &amp;p1,<span class="hljs-type">int</span> &amp;p2)</span></span>&#123;<br><span class="hljs-type">int</span> temp[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">9</span>;i&gt;=<span class="hljs-number">1</span>;i--)<br>temp[i]=n%<span class="hljs-number">10</span>,n/=<span class="hljs-number">10</span>;<br>temp[p1]^=temp[p2],temp[p2]^=temp[p1],temp[p1]^=temp[p2],n=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">9</span>;i++)<br>n=(n*<span class="hljs-number">10</span>+temp[i]);<br><span class="hljs-keyword">return</span> n;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>再试试样例——</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">in</span>:<span class="hljs-number">283104765</span><br><span class="hljs-attribute">out</span>:<span class="hljs-number">4</span><br><span class="hljs-attribute">correct</span>:<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>嗯……不好说，测个之前的错误点吧——</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">in</span>:<span class="hljs-number">603712458</span><br><span class="hljs-attribute">out</span>:<span class="hljs-number">17</span><br><span class="hljs-attribute">correct</span>:<span class="hljs-number">23</span><br></code></pre></td></tr></table></figure><p>……好吧，看来不是康托展开（或逆康托展开）的错</p><p>并且写的时候调试过康托展开和逆康托展开，确实没错啊…… <spanclass="math inline">\(string\)</span> 也应该不会错吧……</p><p>*于是若智的我盯着代码看了整整两天都没找到 <spanclass="math inline">\(bug\)</span> ，两天后：</p><p>算了，去看看讨论吧——</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs tap">“你程序的tx有问题, 比如如果&#x27;0&#x27;在边界上的话, 就不能向左移了,如下例:<br><br>1<span class="hljs-number"> 2 </span>3<br>0<span class="hljs-number"> 4 </span>5<br>6<span class="hljs-number"> 7 </span>8<br><br>这个例子的空格就不能向左移”<br></code></pre></td></tr></table></figure><p><a href="https://www.luogu.com.cn/discuss/196975">原贴</a></p><h3id="section"><strong>！！！！！！！！！！！！！！！！！！！！！！！！</strong></h3><p>千想万想没想到这一层——存储与实际的差别：在用一维数组存储和状态转移的时候，<span class="math inline">\(1\ 2\ 3\ 0\ 4\ 5\ 6\ 7\ 8\)</span> 把 <spanclass="math inline">\(3\)</span> 和 <spanclass="math inline">\(5\)</span> 交换变成 <span class="math inline">\(1\2\ 0\ 3\ 4\ 5\ 6\ 7\ 8\)</span>看来是显而易见符合这个精炼的公式：<strong><span class="label label-warning"> 交换 $P$ 和 $P+(2*k-5)$ 的字符</span></strong>，但是在二维里面却是不合理的移动</p><p>于是我只用了 <span class="math inline">\(2\)</span>分钟加一点判断就改好了困扰我两天的 <spanclass="math inline">\(bug\)</span> ——</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span>(!(aim&gt;=<span class="hljs-number">0</span>&amp;&amp;aim&lt;<span class="hljs-number">9</span>))<br><span class="hljs-keyword">continue</span>;    <br>   ↓改成<br><span class="hljs-keyword">if</span>(!(aim&gt;<span class="hljs-number">0</span>&amp;&amp;aim&lt;=<span class="hljs-number">9</span>)||(z%<span class="hljs-number">3</span>==<span class="hljs-number">1</span>&amp;&amp;aim%<span class="hljs-number">3</span>==<span class="hljs-number">0</span>)||(z%<span class="hljs-number">3</span>==<span class="hljs-number">0</span>&amp;&amp;aim%<span class="hljs-number">3</span>==<span class="hljs-number">1</span>))<br><span class="hljs-keyword">continue</span>;<br></code></pre></td></tr></table></figure><p>顺利的过了样例和错误点——</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">in</span>:<span class="hljs-number">283104765</span><br><span class="hljs-attribute">out</span>:<span class="hljs-number">4</span><br><span class="hljs-attribute">correct</span>:<span class="hljs-number">4</span><br><br><span class="hljs-attribute">in</span>:<span class="hljs-number">603712458</span><br><span class="hljs-attribute">out</span>:<span class="hljs-number">23</span><br><span class="hljs-attribute">correct</span>:<span class="hljs-number">23</span><br></code></pre></td></tr></table></figure><p><a href="https://www.luogu.com.cn/record/108020669">也AC了</a></p><hr /><h3 id="尾声">3. 尾声</h3><p>*去世</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>广搜</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>First Steps.</title>
    <link href="/2023/07/11/first_steps/"/>
    <url>/2023/07/11/first_steps/</url>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=1341359821&amp;auto=1&amp;height=66"></iframe><hr /><ul><li>你好啊，我是<a href="../../../../about/">Fireale焰实</a>。</li><li>欢迎来到我的博客，与我共同跨出每个第一步。</li></ul>]]></content>
    
    
    <categories>
      
      <category>杂项</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂项</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
